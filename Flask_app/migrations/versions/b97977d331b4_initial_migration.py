"""Initial migration2

Revision ID: b97977d331b4
Revises: 
Create Date: 2025-03-22 03:23:45.124746

"""
from datetime import datetime, timedelta
import random

from alembic import op
import sqlalchemy as sa
from sqlalchemy import table, column, Integer, String, Date

# revision identifiers, used by Alembic.
revision = 'b97977d331b4'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('category',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('product',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('category_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['category.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('sale',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.ForeignKeyConstraint(['product_id'], ['product.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###
    seed_test_data()


def seed_test_data():
    categories_products = {
        'Electronics': ["Smartphone", "Tablet", "Smart watch", "TV", "Camera", "Music player", "Headphones", "Laptop"],
        'Clothing': ["trousers", "shorts", "sweatshirt", "jacket", "socks", "hat", "shirt", "gloves"],
        'Books': ["Detective", "Sci-fi", "Historical fiction", "Dystopia", "Fantasy", "Romance novel",
                  "Short stories", "Western", "Horror", "Classic", "Fairy tale"],
        "Office": ["pen", "pencil", "notebook", "felt-tip pen", "stapler", "punch", "eraser"]
    }

    # Вставка категорий
    category_table = table('category',
                           column('id', sa.Integer),
                           column('name', sa.String)
                           )

    op.bulk_insert(category_table,
                   [{'name': name} for name in categories_products.keys()]
                   )

    product_table = table('product',
                          column('id', sa.Integer),
                          column('name', sa.String),
                          column('category_id', sa.Integer)
                          )

    products = []
    category_ids = {name: idx + 1 for idx, name in enumerate(categories_products.keys())}

    for category_name, items in categories_products.items():
        for product_name in items:
            products.append({
                'name': product_name,
                'category_id': category_ids[category_name]
            })

    op.bulk_insert(product_table, products)

    sale_table = table('sale',
                       column('product_id', sa.Integer),
                       column('quantity', sa.Integer),
                       column('date', sa.Date)
                       )

    sales = []
    today = datetime.now().date()

    for product_id in range(1, sum(len(v) for v in categories_products.values()) + 1):

        for i in range(0, 181):
            sale_date = today - timedelta(days=i)
            sales.append({
                'product_id': product_id,
                'quantity': random.randint(1, 50),
                'date': sale_date
            })

    op.bulk_insert(sale_table, sales)


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('sale')
    op.drop_table('product')
    op.drop_table('category')
    # ### end Alembic commands ###
